// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  //provider = "postgresql"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Motoqueiro {
  id       String @id @default(uuid())
  nome     String
  nusuario String
  senha    String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())
  pedido    Pedido[]

  @@map("motoqueiros")
}

model Cliente {
  id          String  @id @default(uuid())
  nome        String
  celular     String
  cpf         String
  email       String
  senha       String
  cep         String
  rua         String
  numero      String
  complemento String
  bairro      String
  cidade      String
  estado      String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  pedidos Pedido?

  @@map("clientes")
}

model Usuario {
  id    String @id @default(uuid())
  nome  String
  email String
  senha String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  pedidos Pedido[]

  @@map("usuarios")
}

model Categoria {
  id   String @id @default(uuid())
  nome String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  produtos Produto[]

  @@map("categorias")
}

model Produto {
  id         String  @id @default(uuid())
  nome       String
  fabricante String 
  quantidade String
  preco      String
  banner     String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  categorias  Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId String

  itens  Itens[]

  @@map("produtos")
}

model Pedido {
  id       String @id @default(uuid())
  n_pedido String
  status   String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  clientes  Cliente @relation(fields: [clienteId], references: [id])
  clienteId String  @unique

  usuarios     Usuario     @relation(fields: [usuarioId], references: [id])
  usuarioId    String  @unique

  Motoqueiro   Motoqueiro @relation(fields: [motoqueiroId], references: [id])
  motoqueiroId String  @unique

  itens Itens[]

  @@map("pedidos")
}

model Itens {
  id         String @id @default(uuid())
  quantidade String
  valorUnico String
  valorTotal String

  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  produtos Produto @relation(fields: [produtoId], references: [id])
  produtoId String

  pedido Pedido @relation(fields: [pedidoId], references: [id])
  pedidoId String

  @@map("itens")
}
